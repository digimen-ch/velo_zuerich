<!DOCTYPE html>
<html>
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
        <title>Automatische Velozählung Stadt Zürich</title>
        <link href="assets/bootstrap/css/bootstrap.css" rel="stylesheet" >
        <link href="assets/fontawesome/css/all.min.css" rel="stylesheet">
        <link href="assets/protip/protip.min.css" rel="stylesheet">
        <link rel="stylesheet" href="https://unpkg.com/leaflet@1.8.0/dist/leaflet.css" integrity="sha512-hoalWLoI8r4UszCkZ5kL8vayOGVae1oxXe/2A4AO6J9+580uKHDO3JdHb7NzwwzK5xr/Fs0W40kiNHxM9vyTtQ==" crossorigin=""/>
        <script src="https://unpkg.com/leaflet@1.8.0/dist/leaflet.js" integrity="sha512-BB3hKbKWOc9Ez/TAwyWxNXeoV9c1v6FIeYiBieIWkpLjauysF18NzgR1MBNBXf8/KABdlkX68nAhlwcDFLGPCQ==" crossorigin=""></script>
        <script src="assets/jquery/jquery-3.6.0.min.js" ></script>
        <script src="assets/bootstrap/js/bootstrap.min.js" ></script>
        <script src="assets/protip/protip.min.js" ></script>
        <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

        <link rel="stylesheet" href="assets/styles.css" />
    </style>

    </head>
    <body>
        <div class="row p-3 g-0 row-1">
            <div class="col-12">
                <h1>Velofahrten in der Stadt Zürich</h1>
                <p>Visualisierung der Daten der automatischen Velozählung der Stadt Zürich. Für mehr Infos bitte 
                    <a href="#" id="modal_info_open">hier klicken.</a></p>
            </div>
        </div>
        <div class="row g-0 row-2">
            <div class="col-control">
                <div class="row g-0">
                    <div class="elm-control btn-up protip btn-disabled" id="go_first" data-pt-title="Zum Anfang" data-pt-gravity="top-right-corner">
                        <i class="fa-solid fa-backward-fast"></i>
                    </div>
                    <div class="elm-control btn-up protip btn-disabled" id="go_back"  data-pt-title="Ein Tag zurück" data-pt-gravity="top-right-corner">
                        <i class="fa-solid fa-backward-step"></i>
                    </div>
                    <div class="elm-control btn-up protip" id="play"  data-pt-title="Abspielen" data-pt-gravity="top-right-corner">
                        <i class="fa-solid fa-play"></i>
                    </div>
                    <div class="elm-control btn-up protip" id="stop"  data-pt-title="Anhalten" data-pt-gravity="top-right-corner">
                        <i class="fa-solid fa-stop"></i>
                    </div>
                    <div class="elm-control btn-up protip" id="go_next"  data-pt-title="Ein Tag vorwärts" data-pt-gravity="top-right-corner">
                        <i class="fa-solid fa-forward-step"></i>
                    </div>
                    <div class="elm-control btn-up protip" id="go_last"  data-pt-title="Zum Ende" data-pt-gravity="top-right-corner">
                        <i class="fa-solid fa-forward-fast"></i>
                    </div>
                </div>
            </div>
            <div class="col-display">
                <div class="elm-display protip" data-pt-title="Datum" data-pt-gravity="top-left-corner">
                    <p class="display-ico"><i class="fa-solid fa-calendar-days"></i></p>
                    <p class="display-txt" id="display_date"></p>
                </div>
                <div class="elm-display protip"  data-pt-title="Total Fahrten" data-pt-gravity="top-left-corner">
                    <p class="display-ico"><i class="fa-solid fa-person-biking"></i></p>
                    <p class="display-txt" id="display_bikes">0</p>   
                </div>
            </div>
        </div>
        <div class="row g-0 row-3">
            <div class="col-progress">
                <input type="range" id="day_slider" min="0" max="1" step="1" value="0" />
            </div>
        </div>
        <div class="row g-0 row-4">
            <div class="col-lg-8 col-sm-12">
                <div id="map"></div>
            </div>
            <div class="col-lg-4 col-sm-12" id="stationen">

            </div>    
        </div>
        <div class="row g-0 row-5">
            <div id="diagram">
                <div id="diagram_o">
                    <div id="diagram_o_l">
                
                    </div>        
                </div>    
            </div>
        </div>

    <!-- Modal -->
    <div id="modal_info"  class="modal fade dark modal-lg" tabindex="-1">
        <div class="modal-dialog modal-dialog-scrollable">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title">Visualisierung Velofahrten der Stadt Zürich</h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
              <p>Diese Visualisierung basiert auf den Zähldaten die das Tiefbaumt der Stadt Zürich erhebt. 
                  Der Veloverkehr wird mit mittels im Strassenbelag eingelassenen Induktionsschlaufen erfasst. 
                  Ebenfalls in erhoben wird der Fussverkehr. 
                  Dieser wird durch passive Infrarotstrahlung gezählt ist aber nicht in dieser Visualisierung dargestellt.</p>
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
              <button type="button" class="btn btn-primary">Save changes</button>
            </div>
          </div>
        </div>
      </div>
    </body>
    <script src="data/standorte.geojson" type="text/javascript"></script>
    <script src="data/velo_pro_tag.json" type="text/javascript"></script>
    <script src="data/velo_pro_kw.json" type="text/javascript"></script>
    <script>

        var map = L.map('map', {
            //center: L.latLng(46.976505, 8.464966),
            //zoom: 8
        });

        var Jawg_Dark = L.tileLayer('https://{s}.tile.jawg.io/jawg-dark/{z}/{x}/{y}{r}.png?access-token={accessToken}', {
            attribution: '<a href="http://jawg.io" title="Tiles Courtesy of Jawg Maps" target="_blank">&copy; JawgMaps</a> &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a>',
            minZoom: 0,
            maxZoom: 22,
            //subdomains: 'abcd',
            accessToken: '7jjJuzy1Kno6LsUAB37qBwNXvnXbGtBrm7uAvTuOcHOEpp1HKhtKg2GDeWwBbKr4'
        });

        Jawg_Dark.addTo(map);

        // bounds stadt zürich
        var map_bounds = [ [47.342658, 8.483465], [47.42559, 8.559581]]

        var map_bounds = [ [47.358655,8.484577], [47.4136406, 8.55933033333333]]

        map.fitBounds( map_bounds );


        function onEachFeature(feature, layer) {

            var popupContent = '';

            if (feature.properties) {
                popupContent += feature.properties.bezeichnung;
                // popupContent += '<br> Anzahl Zähler: ' + feature.properties.anz_zaehler;
            }

            layer.bindPopup(popupContent);
        }

        var markers = {};

        var bicycleRentalLayer = L.geoJSON(standorte, {

            style: function (feature) {
                return feature.properties && feature.properties.style;
            },

            onEachFeature: onEachFeature,
            
            
            pointToLayer: function (feature, latlng) {

                fill_col = '#ff7800'
                if (feature.properties.member == 0){
                    fill_col = '#de0d0d'
                }

                id = feature.properties.id;
                // create icon
                var icon = L.divIcon({
                    iconSize: [0, 0],
                    iconAnchor: [0, 0],
                    popupAnchor: [0, 0],
                    shadowSize: [0, 0],
                    className: 'ico_0 ico_' +  id
                })

                var  m =  L.marker(latlng, {
                    icon: icon,
                    id: 'marker_' + feature.properties.id
                });
                markers[id.toString()] = m
                return m;
            }
        }).addTo(map);



        $(function(){
            
            running = false;

            $('#modal_info_open').click(function(e){
                e.preventDefault();
                console.log('modal open')
                $('#modal_info').modal('toggle');
            })

            // init tooltips and configure
            
            $('.protip')
                .attr('data-pt-delay-in', '800')
                .attr('data-pt-scheme', 'pink')
                .attr('data-pt-size', 'tiny')
                .attr('data-pt-classes', 'tipfont');
            $.protip();

            // alle orte mit anzahl 0 
            var orte_anz = {};
            var orte_ttl = {};
            var dataset = [];

            var style = window.getComputedStyle(document.body);

            for(let i = 0; i < standorte['features'].length; i++) {
                let ort_info = standorte['features'][i]
                let ort_id = ort_info['properties']['id'];
                let coor = ort_info['geometry']['coordinates'];

                let lon = coor[0]
                let lat = coor[1]

                orte_anz[ort_id] = 0
                orte_ttl[ort_id] = 0

                bg_col = style.getPropertyValue('--bg_col_' + ort_id)
                br_col = style.getPropertyValue('--br_col_' + ort_id)

                // legende rechts
                var new_item = $('<div/>',{'class':'legend_item', 'id': 'legend_' + ort_id, 'data-lat' : lat, 'data-lon' : lon, 'data-id' : ort_id});
                var item_descr = $('<div/>',{'class':'item_descr', 'id': 'descr_' + ort_id})
                    .css({ 'text-shadow' : '0 0 12px var(--bg_col_' + ort_id + ')', 'color' : 'var(--br_col_' + ort_id + ')' })
                    .html(ort_info['properties']['bezeichnung']);
                var item_info = $('<div/>',{'class':'item_info'})
                var day_wrap = $('<div/>',{'class':'day_wrap'})
                var day_bar = $('<div/>',{'class':'day_bar ico_' + ort_id, 'id': 'day_bar_' + ort_id})
                var day_txt = $('<div/>',{'class':'day_txt', 'id': 'day_txt_' + ort_id})
                    .css({ 'text-shadow' : '0 0 12px var(--bg_col_' + ort_id + ')', 'color' : 'var(--br_col_' + ort_id + ')' })
                    .html('0');

                day_wrap.append(day_bar).append(day_txt)
                item_info.append(day_wrap)
                var ttl_wrap = $('<div/>',{'class':'ttl_wrap'})
                var ttl_bar = $('<div/>',{'class':'ttl_bar ico_' + ort_id, 'id': 'ttl_bar_' + ort_id})
                var ttl_txt = $('<div/>',{'class':'ttl_txt', 'id': 'ttl_txt_' + ort_id})
                    .css({ 'text-shadow' : '0 0 12px var(--bg_col_' + ort_id + ')', 'color' : 'var(--br_col_' + ort_id + ')' })
                    .html('0');
                ttl_wrap.append(ttl_bar).append(ttl_txt)
                item_info.append(ttl_wrap)

                new_item.append(item_descr).append(item_info);
                $('#stationen').append(new_item);

                data_item = {
                    label:  ort_info['properties']['bezeichnung'],
                    backgroundColor: bg_col,
                    borderColor: br_col,
                    data: velo_pro_kw[ort_id],
                    showLine: true,
                    borderWidth: 1,
                    pointBackgroundColor: bg_col,
                    pointBorderColor: br_col,
                    pointRadius: 0
                }
                dataset.push(data_item)
            }


            var start_date = ''
            var end_date = ''
            var current_date = ''
            var total_days = 0
            var max_rides = 0
            var total_pro_tag = {}

            for (var y in velo_pro_tag) {

                if (!(y in total_pro_tag)) { total_pro_tag[y] = {} }

                for (var m in velo_pro_tag[y]){

                    if (!(m in total_pro_tag[y])) { total_pro_tag[y][m] = {} }

                    for (var d in velo_pro_tag[y][m]){
                        
                        if (!(d in total_pro_tag[y][m])) { total_pro_tag[y][m][d] = {} }

                        if (start_date == '') {
                            start_date = new Date(y, m-1, d, 0, 0, 0, 0)
                            current_date = new Date(y, m-1, d, 0, 0, 0, 0)
                        }

                        end_date = new Date(y, m-1, d, 0, 0, 0, 0)
                        total_days += 1

                        for (var z in orte_ttl){

                            rides = 0;
                            if(velo_pro_tag[y][m][d][z]){
                                rides =  velo_pro_tag[y][m][d][z]
                            }
                            
                            orte_ttl[z] += rides
                            total_pro_tag[y][m][d][z] = orte_ttl[z] 

                            if( max_rides < rides){
                                max_rides = rides
                            }
                            
                        }
                    }
                }
            } // ende loop 

            // das höchste total ermitteln
            max_total = 0
            for(o in orte_ttl){
                if(orte_ttl[o] > max_total){
                    max_total = orte_ttl[o]
                }
            }

            days = Math.ceil(Math.abs(end_date - start_date) / (1000 * 60 * 60 * 24)); 

            $('#day_slider').attr('max', days);

            slide = false;
            $('#day_slider').on('mousedown', function() {
                slide = true;
            });

            $('#day_slider').on('mouseup', function() {
                slide = false;
            });

            $('#day_slider').on("mousemove", function() {
                if(slide == true){
                    if (running == true){
                        clearInterval(playviz);
                        running = false
                        $("#play").removeClass('btn-down');
                    }
                    moveto = parseInt($(this).val())
                    setDay(start_date, moveto)
                }
            });

            $('#day_slider').on("change", function() {

                    moveto = parseInt($(this).val())
                    setDay(start_date, moveto)
                
            });

            $(".btn-up").mouseover(function(){
                if(!$(this).hasClass('btn-disabled')){
                    $(this).addClass("btn-up-hover");
                }
            });
            $(".btn-up").mouseout(function(){
                $(this).removeClass("btn-up-hover");
            });

            $("#play").click(function(){
                if(!$(this).hasClass('btn-disabled')){
                    if (running == false){
                        playviz =  setInterval(setDay, 50, 0, 1)
                        running = true;
                        $(this).addClass('btn-down');
                    }
                }
            });

            $("#stop").mousedown(function(){
                $(this).addClass('btn-down');
                if (running == true){
                    clearInterval(playviz);
                    running = false
                    $("#play").removeClass('btn-down');
                }
            });

            $("#stop").mouseup(function(){
                $(this).removeClass('btn-down');
            });

            $("#go_next").mousedown(function(){
                if(!$(this).hasClass('btn-disabled')){
                    $(this).addClass('btn-down');
                    if (running == true){
                        clearInterval(playviz);
                        running = false;
                        $("#play").removeClass('btn-down');
                    }
                    setDay(current_date, 1)
                }
            });
            $("#go_next").mouseup(function(){
                $(this).removeClass('btn-down');
            });

            $("#go_back").mousedown(function(){
                if(!$(this).hasClass('btn-disabled')){
                    $(this).addClass('btn-down');
                    if (running == true){
                        clearInterval(playviz);
                        $("#play").removeClass('btn-down');
                    }
                    setDay(current_date, -1)
                }
            });
            $("#go_back").mouseup(function(){
                $(this).removeClass('btn-down');
            });

            $("#go_first").mousedown(function(){
                if(!$(this).hasClass('btn-disabled')){
                    $(this).addClass('btn-down');
                    if (running == true){
                        clearInterval(playviz);
                        $("#play").removeClass('btn-down');
                    }
                    setDay(start_date, 0)
                }
            });
            $("#go_first").mouseup(function(){
                $(this).removeClass('btn-down');
            });

            $("#go_last").mousedown(function(){
                if(!$(this).hasClass('btn-disabled')){
                    $(this).addClass('btn-down');
                    if (running == true){
                        clearInterval(playviz);
                        $("#play").removeClass('btn-down');
                    }
                    setDay(end_date, 0)
                }
            });
            $("#go_last").mouseup(function(){
                $(this).removeClass('btn-down');
            });

            // legende functionen
            $('.legend_item').mouseover(function(){
                $(this).addClass('legend_item_o');
            });

            $('.legend_item').mouseout(function(){
                $(this).removeClass('legend_item_o');
            });

            var focus_id = 0

            $('.legend_item').click(function(){
                this_id = $(this).data('id')
                lat = $(this).data('lat')
                lon = $(this).data('lon')

                map.closePopup();

                if ( focus_id == this_id){
                    $('#legend_' + focus_id).removeClass('legend_item_a');
                    focus_id = 0;
                    map.flyToBounds(map_bounds, { duration: 1 } );

                } else {

                    if(focus_id != 0){
                        $('#legend_' + focus_id).removeClass('legend_item_a');
                    }
                
                    $(this).addClass('legend_item_a');
                    focus_id = this_id
                    map.flyTo([lat, lon], 17, {
                            animate: true,
                            duration: 2
                        });

                    //markers[this_id].openPopup()
                    map.on("zoomend", () => { markers[this_id].openPopup(); });


                }

            });


            setSize = function(ico_id, size){

                var ico = document.querySelector('.ico_' + ico_id)
                size = size / 100
                var s = size + 'px'
                var m = (size / 2) * -1 + 'px'

                ico.style.width = s
                ico.style.height = s
                ico.style.marginLeft = m
                ico.style.marginTop = m
            }
            
            disFirst = true;
            disLast = false;
            disableButons = function(what, todo){
                if(what == 'first' && todo != disFirst){
                    if(todo == true){
                        $('#go_first').addClass('btn-disabled')
                        $('#go_back').addClass('btn-disabled')
                    }else{
                        $('#go_first').removeClass('btn-disabled')
                        $('#go_back').removeClass('btn-disabled')
                    }
                    disFirst = todo
                }
                if(what == 'last' && todo != disLast){
                    if(todo == true){
                        $('#go_last').addClass('btn-disabled')
                        $('#go_next').addClass('btn-disabled')
                    }else{
                        $('#go_last').removeClass('btn-disabled')
                        $('#go_next').removeClass('btn-disabled')
                    }
                    disLast = todo
                }
            }

            setDay = function(day, moveto){

                if(day == 0){
                    tag = current_date
                }else{
                    tag = new Date(day)
                }

                if(moveto != 0){
                    tag.setDate(tag.getDate() + moveto);
                }
                current_date = tag          

                let y = tag.getFullYear();
                let m = tag.getMonth() + 1;
                let d = tag.getDate();
                
                let rides = 0

                // anzahl aller orte auf 0 zurücksetzen
                for(var o in orte_anz){ orte_anz[o] = 0 };

                // aktuelle anzahl in orte schreiben
                for (var z in velo_pro_tag[y][m][d]){
                    r = velo_pro_tag[y][m][d][z]
                    orte_anz[z] = r

                    rides += r
                }

                current_day = Math.ceil(Math.abs(current_date - start_date) / (1000 * 60 * 60 * 24)); 

                // progress in %
                if(current_day >= total_days){
                    progress = 0
                    if (running == true){
                        clearInterval(playviz);
                        $("#play").removeClass('btn-down');
                    }
                    disableButons('last', true)
                } else {
                    disableButons('last', false)
                }

                if(current_day < 1){
                    progress = 100
                    disableButons('first', true)
                } else {
                    disableButons('first', false)
                }

                if(current_day < total_days && current_day > 0){
                    progress = 100 - (current_day / total_days * 100)
                    progress = Math.round((progress + Number.EPSILON) * 100) / 100
                }

                $('#diagram_o').width(progress + '%')

                // die grösse setzen
                for(var o in orte_anz){ 
                    // bubbles on the map
                    anz = orte_anz[o]
                    setSize(o, anz)

                    
                    if(anz == 0){
                        progr_day = 0
                    } else {
                        progr_day = anz / max_rides * 100
                        progr_day = Math.round((progr_day + Number.EPSILON) * 100) / 100
                    }
                    $('#day_bar_' + o).width(progr_day + '%')
                    $('#day_txt_' + o).html(anz)

                    anz_rides = 0
                    if(total_pro_tag[y][m][d][o]){
                        anz_rides = total_pro_tag[y][m][d][o]
                    } 
                    
                    progr_ttl = anz_rides / max_total * 100
                    progr_ttl = Math.round((progr_ttl + Number.EPSILON) * 100) / 100
                    $('#ttl_bar_' + o).width(progr_ttl + '%')
                    $('#ttl_txt_' + o).html(anz_rides)


                };
                
                // slider
                $('#day_slider').val(current_day)

                // datum in display
                $("#display_date").html(tag.toLocaleDateString('de-CH', { weekday: 'short', year: 'numeric', month: 'short', day: 'numeric' }))
                $("#display_bikes").html(rides.toLocaleString('de-CH')) 

            }



            var newCanvas = $('<canvas/>',{'class':'diagram_img', 'id': 'lineChart'});

            $('#diagram').append(newCanvas).height(200);

            const labels = [
                '1',
                '2',
                '3',
                '4',
                '5',

            ];

            const data = {
                labels: velo_pro_kw['labels'],
                //labels: labels,
                datasets: dataset
                /*datasets: [{
                    label: 'Langstrasse Nord',
                    backgroundColor: 'rgba(255, 99, 132, 0.5)',
                    borderColor: 'rgb(255, 99, 132)',
                    data: [],
                    showLine: true,
                    borderWidth: 1,
                    pointBackgroundColor: 'rgba(0, 0, 0, 0)',
                    pointBorderColor: 'rgba(0, 0, 0, 0)',
                }]*/
            };

            const config = {
                type: 'line',
                data: data,
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false
                        },
                        tooltip:{
                            enabled: true 
                        }
                    },
                    scales: {
                        x: {
                            min: 0,
                            grid: {
                                display: false
                            },
                            ticks: {
                                display: false
                            }
                        },
                        y: {
                            stacked: false,
                            min: 0,
                            //max: max_rides,
                            grid: {
                                display: false
                            },
                            ticks: {
                                display: false //this will remove only the label
                            }
                        }
                    }
                }            
            };

            const lineChart = new Chart(
                document.getElementById('lineChart'),
                config
            );
        });
        





        </script>
</html>